
#if 0
void SendPacketToSwadgeDemo()
{
	unsigned char data[257] = { 0 };
	data[0] = 173;

	{
		static int iter;
		iter++;
		int i, j;
		uint8_t buff[256];
		uint8_t * pack = buff;
		uint32_t now = (uint32_t)(OGGetAbsoluteTime() * 1000);
		int seed = now;

		*((uint32_t*)pack) = FSNET_CODE_SERVER;  pack += 4;

		*((uint32_t*)pack) = now;  pack += 4; // protVer, models, ships, boolets in UEQ.
		uint32_t assetCounts = 0;
		int acbits = 0;
		int sendmod = 2;
		int sendshp = 2;
		int sendboo = 2;
		acbits += WriteUEQ( &assetCounts, 1 );
		acbits += WriteUEQ( &assetCounts, sendmod ); //models
		acbits += WriteUEQ( &assetCounts, sendshp ); // ships
		acbits += WriteUEQ( &assetCounts, sendboo ); // boolets
		FinalizeUEQ( &assetCounts, acbits );
		*((uint32_t*)pack) = assetCounts; pack += 4;

		static int send_no;
		send_no+=2;
		if( send_no >= 80 ) send_no = 0;

		for( i = 0; i < sendmod; i++ )
		{
			int nrbones = 16;
			// First is a codeword.  Contains ID, bones, bone mapping.
			uint32_t codeword = (send_no+i) | ((nrbones-1)<<8);

			int sbl = 4+8;
			for( j = 0; j < nrbones; j++ )
			{
				int v = !(j==5|| j == 11);
				codeword |= v << (sbl++);

				if( !v )
				{
					//Do we reset back to zero?
					codeword |= 0 << (sbl++);  // 0 is yes, reset back to zero.
					codeword |= 1 << (sbl++);  // Do we draw another line from zero?
				}
			}
			*((uint32_t*)pack) = codeword; pack += 4;

			int16_t loc[3];
			int ang = ((now >> 19)+i*30) % 360;
			loc[0] = speedyHash(seed)>>6;//getSin1024( ang )>>2;
			loc[1] = i+send_no+1000+(speedyHash(seed)>>6);
			loc[2] = speedyHash(seed)>>6;//getCos1024( ang )>>2;
			memcpy( pack, loc, sizeof( loc ) ); pack += sizeof( loc );
			*(pack++) = 255; // radius
			*(pack++) = (i+send_no+iter*10)%216; // req color
			int8_t vel[3] = { 0 };
			memcpy( pack, vel, sizeof( vel ) ); pack += sizeof( vel );

			for( j = 0; j < nrbones; j++ )
			{
				int8_t bone[3];
				int ang = ((now >> 13)+j*40) % 360;
				bone[0] = 0;//getSin1024( ang )>>5;
				bone[1] = 0;//getCos1024( ang )>>5;
				bone[2] = 30;
				memcpy( pack, bone, sizeof( bone ) ); pack += sizeof( bone );
			}
		}

		for( i = 0; i < sendshp; i++ )
		{
			// Send a ship.
			*(pack++) = i+send_no; // "shipNo"
			int16_t loc[3];
			int ang = ((now >> 12)+i*30) % 360;
			loc[0] = speedyHash( seed ) >> 6; //getSin1024( ang )>>3;
			loc[1] = speedyHash( seed ) >> 6;//200;
			loc[2] = speedyHash( seed ) >> 6;//getCos1024( ang )>>3;
			int8_t vel[3] = { 0 };
			int8_t orot[3] = { 0 };
			memcpy( pack, loc, sizeof( loc ) ); pack += sizeof( loc );
			memcpy( pack, vel, sizeof( vel ) ); pack += sizeof( vel ); //mirrors velAt real speed = ( this * microsecond >> 16 )
			orot[0] = ((now>>16)&0xff);
			orot[1] = 0;
			orot[2] = 0;
			memcpy( pack, orot, sizeof( orot ) ); pack += sizeof( orot );

			uint8_t flags = 1;
			uint16_t kbb = 0;
			memcpy( pack, &flags, sizeof( flags ) ); pack += sizeof( flags );
			memcpy( pack, &kbb, sizeof( kbb ) ); pack += sizeof( kbb );
			*(pack++) = (i+send_no+iter*10)%216; // req color

		}
		// Now, need to send boolets.
		for( i = 0; i < sendboo; i++ )
		{
			int16_t loc[3];
			int16_t rot[2] = { 0 };
			rot[1] = 1000;
			uint16_t bid = i+1 +send_no;

			int ang = (i*30+(now >> 12)) % 360;
			loc[0] = i;//getSin1024( ang )>>3;
			loc[1] = 500;
			loc[2] = 0;//getCos1024( ang )>>3;

			*(pack++) = i+send_no; // Local "bulletID"
			memcpy( pack, &now, sizeof(now) ); pack += sizeof( now );
			memcpy( pack, loc, sizeof(loc) ); pack += sizeof( loc );
			memcpy( pack, rot, sizeof(rot) ); pack += sizeof( rot );
			memcpy( pack, &bid, sizeof(bid) ); pack += sizeof( bid );
		}

		int len = pack - buff;
		data[1] = len;
		memcpy( data+2, buff, len );
	}
	hid_send_feature_report( swadge, data, 256 );
}
#endif